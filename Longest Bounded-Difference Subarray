import java.util.*;

class Solution {
    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        int n = arr.length;
        Deque<Integer> minDeque = new ArrayDeque<>();
        Deque<Integer> maxDeque = new ArrayDeque<>();
        
        int l = 0, bestL = 0, bestLen = 0;
        
        for (int r = 0; r < n; r++) {
            // Maintain decreasing deque for max
            while (!maxDeque.isEmpty() && arr[maxDeque.peekLast()] < arr[r]) {
                maxDeque.pollLast();
            }
            maxDeque.addLast(r);

            // Maintain increasing deque for min
            while (!minDeque.isEmpty() && arr[minDeque.peekLast()] > arr[r]) {
                minDeque.pollLast();
            }
            minDeque.addLast(r);

            // Shrink window if condition breaks
            while (arr[maxDeque.peekFirst()] - arr[minDeque.peekFirst()] > x) {
                l++;
                if (maxDeque.peekFirst() < l) maxDeque.pollFirst();
                if (minDeque.peekFirst() < l) minDeque.pollFirst();
            }

            // Update best result
            if (r - l + 1 > bestLen) {
                bestLen = r - l + 1;
                bestL = l;
            }
        }

        // Collect result in ArrayList
        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < bestLen; i++) {
            result.add(arr[bestL + i]);
        }
        return result;
    }
}
