class Solution {
    public int powerfulInteger(int[][] intervals, int k) {
        TreeMap<Integer, Integer> map = new TreeMap<>();

        // Mark the start and end+1 of each interval
        for (int[] interval : intervals) {
            map.put(interval[0], map.getOrDefault(interval[0], 0) + 1);
            map.put(interval[1] + 1, map.getOrDefault(interval[1] + 1, 0) - 1);
        }

        int count = 0;
        int prev = 0;
        int powerful = -1;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int point = entry.getKey();

            if (count >= k) {
                // All values between prev and point - 1 are powerful
                powerful = point - 1;
            }

            count += entry.getValue();
            prev = point;
        }

        return powerful;
    }
}
