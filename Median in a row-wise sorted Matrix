class Solution {
    public int median(int[][] mat) {
        int n = mat.length, m = mat[0].length;

        // Minimum element in matrix (first element of each row)
        int minVal = Integer.MAX_VALUE;
        // Maximum element in matrix (last element of each row)
        int maxVal = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            minVal = Math.min(minVal, mat[i][0]);
            maxVal = Math.max(maxVal, mat[i][m - 1]);
        }

        int desired = (n * m + 1) / 2; // position of median in sorted order

        while (minVal < maxVal) {
            int mid = minVal + (maxVal - minVal) / 2;
            int place = 0;

            // Count elements â‰¤ mid using upper bound in each row
            for (int i = 0; i < n; i++) {
                place += countSmallerThanOrEqual(mat[i], mid);
            }

            if (place < desired) {
                minVal = mid + 1; // median is larger
            } else {
                maxVal = mid; // median is smaller or equal
            }
        }

        return minVal;
    }

    // Binary search: count elements <= target in a sorted row
    private int countSmallerThanOrEqual(int[] row, int target) {
        int l = 0, r = row.length;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (row[mid] <= target) l = mid + 1;
            else r = mid;
        }
        return l;
    }
}
