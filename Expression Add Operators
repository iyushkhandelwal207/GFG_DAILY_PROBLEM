import java.util.*;

class Solution {
    public ArrayList<String> findExpr(String s, int target) {
        ArrayList<String> res = new ArrayList<>();
        backtrack(res, s, target, 0, 0, 0, "");
        Collections.sort(res);  // lexicographically smallest order
        return res;
    }

    private void backtrack(ArrayList<String> res, String s, int target, int pos, long calc, long tail, String expr) {
        // Base case
        if (pos == s.length()) {
            if (calc == target) res.add(expr);
            return;
        }

        for (int i = pos; i < s.length(); i++) {
            // Prevent numbers with leading zeros (like "03")
            if (i != pos && s.charAt(pos) == '0') break;

            long curr = Long.parseLong(s.substring(pos, i + 1));
            String currStr = s.substring(pos, i + 1);

            if (pos == 0) {
                // First number (no operator before it)
                backtrack(res, s, target, i + 1, curr, curr, currStr);
            } else {
                // '+'
                backtrack(res, s, target, i + 1, calc + curr, curr, expr + "+" + currStr);

                // '-'
                backtrack(res, s, target, i + 1, calc - curr, -curr, expr + "-" + currStr);

                // '*'
                backtrack(res, s, target, i + 1, calc - tail + tail * curr, tail * curr, expr + "*" + currStr);
            }
        }
    }
}
