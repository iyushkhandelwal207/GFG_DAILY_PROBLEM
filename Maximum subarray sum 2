import java.util.*;

class Solution {
    public int maxSubarrSum(int[] arr, int a, int b) {
        int n = arr.length;
        int[] prefix = new int[n + 1];

        // Build prefix sum
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }

        int maxSum = Integer.MIN_VALUE;

        // Deque will store candidate prefix sums (indexes)
        Deque<Integer> dq = new ArrayDeque<>();

        for (int i = a; i <= n; i++) {
            // Add prefix[i - a] into deque (valid start for subarray of length >= a)
            while (!dq.isEmpty() && prefix[dq.peekLast()] >= prefix[i - a]) {
                dq.pollLast();
            }
            dq.addLast(i - a);

            // Remove elements that are out of window (subarray > b)
            if (!dq.isEmpty() && dq.peekFirst() < i - b) {
                dq.pollFirst();
            }

            // Now, prefix[i] - prefix[dq.peekFirst()] is a candidate sum
            if (!dq.isEmpty()) {
                maxSum = Math.max(maxSum, prefix[i] - prefix[dq.peekFirst()]);
            }
        }

        return maxSum;
    }
}
