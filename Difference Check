import java.util.*;

class Solution {
    public int minDifference(String[] arr) {
        int n = arr.length;
        int[] secondsArr = new int[n];

        // Step 1: Convert time strings to seconds
        for (int i = 0; i < n; i++) {
            String[] parts = arr[i].split(":");
            int h = Integer.parseInt(parts[0]);
            int m = Integer.parseInt(parts[1]);
            int s = Integer.parseInt(parts[2]);
            secondsArr[i] = h * 3600 + m * 60 + s;
        }

        // Step 2: Sort the seconds array
        Arrays.sort(secondsArr);

        // Step 3: Find minimum difference between adjacent times
        int minDiff = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minDiff = Math.min(minDiff, secondsArr[i] - secondsArr[i - 1]);
        }

        // Step 4: Handle wrap-around from last to first (next day)
        int wrapAroundDiff = (86400 - secondsArr[n - 1]) + secondsArr[0]; // 86400 = 24*60*60
        minDiff = Math.min(minDiff, wrapAroundDiff);

        return minDiff;
    }
}
