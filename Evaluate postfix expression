import java.util.*;

class Solution {
    public int evaluatePostfix(String[] arr) {
        Stack<Long> st = new Stack<>();

        for (String token : arr) {
            if (isNumber(token)) {
                st.push(Long.parseLong(token));
            } else {
                long b = st.pop();
                long a = st.pop();
                long result;
                switch (token) {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "*": result = a * b; break;
                    case "/": result = customDivide(a, b); break; // floor division
                    case "^": result = integerPow(a, b); break;   // exponent
                    default:
                        throw new IllegalArgumentException("Unsupported operator: " + token);
                }
                st.push(result);
            }
        }
        return st.pop().intValue();
    }

    private boolean isNumber(String s) {
        try {
            Long.parseLong(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // floor division (toward -infinity)
    private long customDivide(long a, long b) {
        if (b == 0) throw new ArithmeticException("Division by zero");
        long q = a / b;
        if ((a ^ b) < 0 && a % b != 0) q -= 1;
        return q;
    }

    // integer power: handles non-negative integer exponents using fast exp.
    // For negative exponents returns 0 for most bases (fractional); special-case Â±1.
    private long integerPow(long base, long exp) {
        if (exp < 0) {
            if (base == 1) return 1;
            if (base == -1) return (exp % 2 == 0) ? 1 : -1;
            return 0; // fractional result -> integer 0
        }
        long result = 1;
        long b = base;
        long e = exp;
        while (e > 0) {
            if ((e & 1L) == 1L) result = result * b;
            b = b * b;
            e >>= 1;
        }
        return result;
    }
}
