class Solution {
    int maxSum;

    int findMaxSum(Node root) {
        maxSum = Integer.MIN_VALUE; // Initialize with minimum value
        findPathSum(root);
        return maxSum;
    }

    int findPathSum(Node node) {
        if (node == null) return 0;

        // Calculate max sum on left and right subtrees
        int left = Math.max(0, findPathSum(node.left));  // Ignore negative paths
        int right = Math.max(0, findPathSum(node.right));

        // Update global maxSum if needed
        maxSum = Math.max(maxSum, node.data + left + right);

        // Return max gain if continuing the path upward
        return node.data + Math.max(left, right);
    }
}
