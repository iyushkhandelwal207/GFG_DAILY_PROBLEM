import java.util.*;

class Solution {
    public boolean isPossible(int[] arr, int k) {
        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> need = new HashMap<>();

        // Count frequency of each element
        for (int x : arr) {
            freq.put(x, freq.getOrDefault(x, 0) + 1);
        }

        for (int x : arr) {
            if (freq.get(x) == 0) continue; // already used

            if (need.getOrDefault(x, 0) > 0) {
                // Use 'x' to extend an existing subsequence
                need.put(x, need.get(x) - 1);
                need.put(x + 1, need.getOrDefault(x + 1, 0) + 1);
            } else {
                // Try to start a new subsequence of length at least k
                boolean possible = true;
                for (int i = 0; i < k; i++) {
                    if (freq.getOrDefault(x + i, 0) <= 0) {
                        possible = false;
                        break;
                    }
                }
                if (!possible) return false;

                // Use elements x to x+k-1
                for (int i = 0; i < k; i++) {
                    freq.put(x + i, freq.get(x + i) - 1);
                }
                // This subsequence now expects x+k next
                need.put(x + k, need.getOrDefault(x + k, 0) + 1);
                continue;
            }
            freq.put(x, freq.get(x) - 1);
        }

        return true;
    }
}
