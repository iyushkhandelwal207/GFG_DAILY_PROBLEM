import java.util.*;

class Solution {
    // Function to compute Catalan numbers
    private int catalan(int n) {
        if (n <= 1) return 1;
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += catalan(i) * catalan(n - i - 1);
        }
        return res;
    }

    public ArrayList<Integer> countBSTs(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> result = new ArrayList<>();
        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        
        // Precompute Catalan numbers (0 to n)
        int[] cat = new int[n + 1];
        cat[0] = cat[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                cat[i] += cat[j] * cat[i - j - 1];
            }
        }

        // Compute result for each element in original array
        for (int val : arr) {
            int idx = Arrays.binarySearch(sorted, val);
            int left = idx;              // elements smaller than val
            int right = n - idx - 1;     // elements greater than val
            result.add(cat[left] * cat[right]);
        }

        return result;
    }
}
