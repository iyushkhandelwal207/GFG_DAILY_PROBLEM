import java.util.*;

class Solution {
    public ArrayList<Integer> farMin(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(n, -1));

        // Monotonic increasing stack (value, index)
        ArrayList<int[]> sortedList = new ArrayList<>();

        for (int i = n - 1; i >= 0; i--) {
            int low = 0, high = sortedList.size() - 1, res = -1;

            // Binary search for farthest smaller
            while (low <= high) {
                int mid = (low + high) / 2;
                if (sortedList.get(mid)[0] < arr[i]) {
                    res = sortedList.get(mid)[1]; // candidate index
                    low = mid + 1; // try farther
                } else {
                    high = mid - 1;
                }
            }

            ans.set(i, res);

            // Maintain increasing order by value
            if (sortedList.isEmpty() || arr[i] < sortedList.get(sortedList.size() - 1)[0]) {
                sortedList.add(new int[]{arr[i], i});
            }
        }

        return ans;
    }
}
