import java.util.*;

class Solution {
    public int shortCycle(int V, int[][] edges) {
        // Step 1: Build adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }

        int ans = Integer.MAX_VALUE;

        // Step 2: BFS from each node
        for (int i = 0; i < V; i++) {
            int[] dist = new int[V];
            Arrays.fill(dist, -1);
            Queue<Integer> q = new LinkedList<>();
            int[] parent = new int[V];
            Arrays.fill(parent, -1);

            dist[i] = 0;
            q.offer(i);

            while (!q.isEmpty()) {
                int u = q.poll();

                for (int v : adj.get(u)) {
                    if (dist[v] == -1) {
                        // not visited
                        dist[v] = dist[u] + 1;
                        parent[v] = u;
                        q.offer(v);
                    } else if (parent[u] != v) {
                        // found a cycle
                        ans = Math.min(ans, dist[u] + dist[v] + 1);
                    }
                }
            }
        }

        // Step 3: If no cycle found
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
